buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id 'java-library'
    id 'signing'
}

ext {
    bouncycastleVersion = '1.66'
    junitJupiterVersion = '5.4.2'
}

allprojects {
    version '0.1.3'
    group = 'org.tron.tronj'

    repositories {
        jcenter()
        google()
        maven { url "https://jitpack.io" }
        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }

}

subprojects {
    apply plugin: 'com.github.dcendents.android-maven'
    group='com.github.mnock'

    apply plugin: 'java'


//以下为配置library注释在打包jar后保留
// 打包源码jar
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    if (project.hasProperty("android")) { // Android libraries
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        task javadoc(type: Javadoc) {
            failOnError  false
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }
    } else { // Java libraries
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
    }

    javadoc {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
            links "http://docs.oracle.com/javase/7/docs/api"
        }
    }

// 制作文档(Javadoc)
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

